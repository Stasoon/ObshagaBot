from aiogram.filters.callback_data import CallbackData
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from src.database.models import Category, Subcategory
from src.misc.callback_factories import SubcategoryCallback


class StatisticCallback(CallbackData, prefix='admin_stats'):
    action: str


class AdminKeyboards:

    @staticmethod
    def get_done_or_cancel() -> ReplyKeyboardMarkup:
        builder = ReplyKeyboardBuilder()
        builder.button(text='–ì–æ—Ç–æ–≤–æ')
        builder.button(text='–û—Ç–º–µ–Ω–∏—Ç—å')
        builder.adjust(1)
        return builder.as_markup(resize_keyboard=True)

    @staticmethod
    def get_admin_menu() -> ReplyKeyboardMarkup:
        builder = ReplyKeyboardBuilder()

        builder.button(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        builder.button(text='‚úâ –†–∞—Å—Å—ã–ª–∫–∞')
        builder.button(text='üì≤ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏')
        builder.button(text='‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ')

        builder.adjust(1)
        return builder.as_markup(resize_keyboard=True)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    @staticmethod
    def get_statistics() -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()

        builder.button(text='–ß–∞—Å', callback_data=StatisticCallback(action='hour'))
        builder.button(text='–°—É—Ç–∫–∏', callback_data=StatisticCallback(action='day'))
        builder.button(text='–ù–µ–¥–µ–ª—è', callback_data=StatisticCallback(action='week'))
        builder.button(text='–ú–µ—Å—è—Ü', callback_data=StatisticCallback(action='month'))
        builder.button(text='‚å® –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data=StatisticCallback(action='other'))
        builder.button(text='‚è¨ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚è¨', callback_data=StatisticCallback(action='export'))

        builder.adjust(2, 2, 1, 1)
        return builder.as_markup()

    @staticmethod
    def get_back_from_stats() -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data=StatisticCallback(action='back'))
        return builder.as_markup()

    @staticmethod
    def get_edit_content() -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()

        for category in Category.select():
            builder.button(text=f"* {category.title} *", callback_data='*')

            for subcategory in Subcategory.select().where(Subcategory.category == category):
                builder.button(text=subcategory.title, callback_data=SubcategoryCallback(code=subcategory.id))

        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def get_cancel() -> ReplyKeyboardMarkup:
        builder = ReplyKeyboardBuilder()
        builder.button(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
        return builder.as_markup(resize_keyboard=True)


class MailingKb:

    @staticmethod
    def get_skip_adding_button_to_post() -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–Ω–æ–ø–∫–∏', callback_data='continue_wout_button')
        return builder.as_markup()

    @staticmethod
    def get_cancel_button() -> InlineKeyboardButton:
        return InlineKeyboardButton(text='üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_mailing')

    @staticmethod
    def get_cancel_markup() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[[MailingKb.get_cancel_button()]])

    @staticmethod
    def get_confirm_mailing() -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ùó –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É ‚ùó', callback_data='start_mailing')
        builder.add(MailingKb.get_cancel_button())
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def generate_markup_from_text(text: str) -> InlineKeyboardMarkup:
        markup_builder = InlineKeyboardBuilder()

        lines = text.split('\n')  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        for line in lines:  # –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            button_contents = line.strip().split('|')  # —Ä–∞–∑–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
            row_builder = InlineKeyboardBuilder()

            for content in button_contents:
                item_parts = content.strip().split()
                text = ' '.join(item_parts[:-1])
                url = item_parts[-1]
                if text and url:
                    row_builder.button(text=text, url=url)

            row_builder.adjust(len(button_contents))
            markup_builder.attach(row_builder)

        return markup_builder.as_markup()


