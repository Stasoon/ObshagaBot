from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InputMediaDocument
from aiogram.fsm.context import FSMContext

from config import REQUESTS_CHANNEL_ID
from src.database.users import get_user_or_none
from src.misc.enums import WORK_TYPES
from src.misc.states import SpecialistRegistrationStates
from src.keyboards.user import UserKeyboards
from src.misc.callback_factories import WorkTypeCallback


async def handle_i_am_specialist(message: Message, state: FSMContext):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:', reply_markup=ReplyKeyboardRemove())
    await state.set_state(SpecialistRegistrationStates.enter_name)


async def handle_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)

    await message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', reply_markup=UserKeyboards.get_phone())
    await state.set_state(SpecialistRegistrationStates.enter_phone)


async def handle_phone(message: Message, state: FSMContext):
    phone_number = message.contact.phone_number if message.contact else message.text
    await state.update_data(phone_number=phone_number)

    await message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ:',
        reply_markup=UserKeyboards.get_works_types()
    )
    await message.answer(text='–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"', reply_markup=UserKeyboards.get_done())

    await state.set_state(SpecialistRegistrationStates.enter_works)


async def handle_work(callback: CallbackQuery, state: FSMContext, callback_data: WorkTypeCallback):
    data = await state.get_data()
    works = data.get('works') or []

    if callback_data.work_id in works:
        works.remove(callback_data.work_id)
    else:
        works.append(callback_data.work_id)

    await state.update_data(works=works)
    markup = UserKeyboards.get_works_types(marked_works=works)
    await callback.message.edit_reply_markup(reply_markup=markup)


async def handle_save_works(message: Message, state: FSMContext):
    works = (await state.get_data()).get('works')

    if not works:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∏–¥ —Ä–∞–±–æ—Ç!')
        return

    await state.update_data(works=[WORK_TYPES.get(work_id) for work_id in works])

    await message.answer(
        text='–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫. \n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"',
        reply_markup=UserKeyboards.get_skip()
    )
    await state.set_state(SpecialistRegistrationStates.enter_works_comment)


async def handle_works_comment(message: Message, state: FSMContext):
    if not message.text.lower().startswith('–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):
        await state.update_data(works_comment=message.text)

    await message.answer(
        text='–ù–∞–ø–∏—à–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è:',
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(SpecialistRegistrationStates.enter_specialties)


async def handle_specialties(message: Message, state: FSMContext):
    await state.update_data(specialties=message.text)

    await message.answer(
        text='–ù–∞–ø–∏—à–∏—Ç–µ, —Å –∫–∞–∫–∏–º–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏ –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å:',
        reply_markup=UserKeyboards.get_skip()
    )
    await state.set_state(SpecialistRegistrationStates.enter_languages)


async def handle_languages(message: Message, state: FSMContext):
    if not message.text.lower().startswith('–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):
        await state.update_data(languages=message.text)

    await message.answer(
        text='–†–∞–±–æ—Ç–∞–µ—Ç–µ –ª–∏ —Å –≤—É–∑–æ–≤—Å–∫–∏–º –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç–æ–º?',
        reply_markup=UserKeyboards.get_anti_plagiarism()
    )
    await state.set_state(SpecialistRegistrationStates.enter_anti_plagiarism)


async def handle_anti_plagiarism(message: Message, state: FSMContext):
    if message.text.lower() not in ('–¥–∞', '–Ω–µ—Ç', '—Ç–æ–ª—å–∫–æ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º'):
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!')
        return

    await state.update_data(anti_plagiarism=message.text)
    await message.answer(
        text='–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –¥–ª—è —Å–µ–±—è –Ω–∞—à—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é —Ä–∞–±–æ—Ç—É –∏–ª–∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É?',
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(SpecialistRegistrationStates.enter_main_or_part_time_job)


async def handle_main_or_part_time_job(message: Message, state: FSMContext):
    await state.update_data(main_or_part_time_job=message.text)

    await message.answer(text='–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –∏ –≤ –Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –Ω–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?')
    await state.set_state(SpecialistRegistrationStates.enter_work_hours)


async def handle_work_hours(message: Message, state: FSMContext):
    await state.update_data(work_hours=message.text)

    await message.answer(
        text='–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ. \n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"',
        reply_markup=UserKeyboards.get_skip()
    )
    await state.set_state(SpecialistRegistrationStates.enter_additional_info)


async def handle_additional_info(message: Message, state: FSMContext):
    if not message.text.lower().startswith('–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):
        await state.update_data(additional_info=message.text)

    await message.answer(
        text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤–∞—à–∏—Ö –≥–æ—Ç–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (5-10 —à—Ç—É–∫):',
        reply_markup=UserKeyboards.get_done()
    )
    await state.set_state(SpecialistRegistrationStates.enter_work_examples)


async def handle_work_example(message: Message, state: FSMContext):
    data = await state.get_data()
    documents = data.get('documents') or []

    if len(documents) >= 9:
        await message.answer('–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ª–∏—à—å 10 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"')
        return

    if message.document:
        await message.reply('–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω')
        documents.append(message.document.file_id)
        await state.update_data(documents=documents)

    elif message.text.lower().startswith('–≥–æ—Ç–æ–≤–æ'):
        if not documents:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ Word-–¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤–∞—à–∏—Ö —Ä–∞–±–æ—Ç!')
            return

        user = get_user_or_none(telegram_id=message.from_user.id)
        user.is_registration_passed = True
        user.save()

        await message.answer(
            text='üéâ –í–∞—à–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏.',
            reply_markup=ReplyKeyboardRemove()
        )

        await state.clear()
        await send_request_to_admin(bot=message.bot, user=message.from_user, request_data=data)

    else:
        await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ Word-–¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤–∞—à–∏—Ö —Ä–∞–±–æ—Ç!')


async def send_request_to_admin(bot: Bot, user, request_data: dict):
    user_link = f"@{user.username}" if user.username else f"<a href='tg://user?id={user.id}'>{user.full_name}</a>"

    text = (
        f"ID: {user.id} \n"
        f"–°—Å—ã–ª–∫–∞: {user_link} \n\n"
        
        f"–ò–º—è: {request_data.get('name')} \n"
        f"‚òé: {request_data.get('phone_number')} \n\n"
        
        f"–†–∞–±–æ—Ç—ã: {', '.join(w for w in request_data.get('works'))} \n"
        f"üí¨: {request_data.get('works_comment') or '-'} \n\n"
        
        f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: {request_data.get('specialties') or '-'} \n"
        f"–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏: {request_data.get('languages') or '-'} \n"
        f"–†–∞–±–æ—Ç–∞ —Å –∞–Ω—Ç–∏-–ø–ª–∞–≥–∏–∞—Ç–æ–º: {request_data.get('anti_plagiarism') or '-'} \n\n"
        
        f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞: {request_data.get('main_or_part_time_job') or '-'} \n"
        f"üïê: {request_data.get('work_hours') or '-'} \n"
        f"–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {request_data.get('additional_info') or '-'} \n"
    )

    documents = request_data.get('documents')

    work_examples = [InputMediaDocument(media=doc) for doc in documents[:-1]]
    work_examples.append(InputMediaDocument(media=documents[-1], caption=text))
    await bot.send_media_group(chat_id=REQUESTS_CHANNEL_ID, media=work_examples)


def register_specialist_registration_handlers(router: Router):
    router.message.register(handle_i_am_specialist, F.text.lower().contains('—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.'))

    # –í–≤–æ–¥ –∏–º–µ–Ω–∏
    router.message.register(handle_name, SpecialistRegistrationStates.enter_name)
    # –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    router.message.register(handle_phone, SpecialistRegistrationStates.enter_phone)

    # –í—ã–±–æ—Ä –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç
    router.callback_query.register(handle_work, WorkTypeCallback.filter(), SpecialistRegistrationStates.enter_works)
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä —Ä–∞–±–æ—Ç
    router.message.register(handle_save_works, F.text.lower().contains('–≥–æ—Ç–æ–≤–æ'), SpecialistRegistrationStates.enter_works)
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∏–¥–∞–º —Ä–∞–±–æ—Ç
    router.message.register(handle_works_comment, SpecialistRegistrationStates.enter_works_comment)

    # –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    router.message.register(handle_specialties, SpecialistRegistrationStates.enter_specialties)
    # –Ø–∑—ã–∫–∏
    router.message.register(handle_languages, SpecialistRegistrationStates.enter_languages)
    # –†–∞–±–æ—Ç–∞ —Å –∞–Ω—Ç–∏-–ø–ª–∞–≥–∏–∞—Ç–æ–º
    router.message.register(handle_anti_plagiarism, SpecialistRegistrationStates.enter_anti_plagiarism)

    # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∏–ª–∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞
    router.message.register(handle_main_or_part_time_job, SpecialistRegistrationStates.enter_main_or_part_time_job)
    # –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã
    router.message.register(handle_work_hours, SpecialistRegistrationStates.enter_work_hours)
    # –î–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    router.message.register(handle_additional_info, SpecialistRegistrationStates.enter_additional_info)
    # –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç
    router.message.register(handle_work_example, SpecialistRegistrationStates.enter_work_examples)
