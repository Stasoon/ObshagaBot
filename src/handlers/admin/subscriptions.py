from urllib.parse import urlparse

from aiogram import Router, F
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramUnauthorizedError, TelegramForbiddenError

from src.database.channels_to_subscribe import get_channels, save_channel, delete_channel


class SubscriptionChannelAdding(StatesGroup):
    wait_for_post = State()
    wait_for_url = State()


class ChannelToSubscribeCallback(CallbackData, prefix='channel_to_sub'):
    channel_id: int
    action: str


# region AddChannels

def get_menu() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='add_channel')
    builder.button(text='‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='del_channel')
    builder.adjust(1)
    return builder.as_markup()


def get_cancel() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
    return builder.as_markup()


def get_add_channel(bot_username: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞', url=f'https://t.me/{bot_username}?startchannel&admin=invite_users')
    builder.button(text='üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
    builder.adjust(1)
    return builder.as_markup()


def get_channels_markup() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    for channel in get_channels():
        builder.button(
            text=channel.title,
            callback_data=ChannelToSubscribeCallback(channel_id=channel.channel_id, action='delete')
        )

    builder.button(text='üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
    builder.adjust(1)
    return builder.as_markup()


async def send_subchecking_menu(message: Message):
    text = 'üì≤ –ö–∞–Ω–∞–ª—ã –Ω–∞ –û–ü: \n\n'
    text += " \n".join(
        f"{n}) <a href='{channel.url}'>{channel.title}</a>" for n, channel in enumerate(get_channels(), start=1)
    ) + ' \n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?'
    await message.answer(text=text, reply_markup=get_menu(), parse_mode='HTML')


async def __handle_subchecking_message(message: Message) -> None:
    await send_subchecking_menu(message)


async def __handle_addchannel_callback(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.delete()
    text = (
        '1) –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª \n'
        '2) –ù–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –≤–∏–¥–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ \n'
        '3) –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞'
    )
    bot_username = (await callback.bot.get_me()).username
    await callback.message.answer(text=text, reply_markup=get_add_channel(bot_username=bot_username))
    await state.set_state(SubscriptionChannelAdding.wait_for_post)


async def __handle_channel_post_message(message: Message, state: FSMContext):
    if not message.forward_origin:
        await message.answer('–≠—Ç–æ –Ω–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å')
        return

    try:
        channel = message.forward_from_chat
        bot_as_member = await channel.get_member(message.bot.id)
        assert bot_as_member.can_invite_users
    except (TelegramUnauthorizedError, TelegramForbiddenError):
        await message.answer(
            '–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ —á–∞—Ç–µ! –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º –≤ –∫–∞–Ω–∞–ª–µ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, '
            '–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. '
        )
    except AssertionError:
        await message.answer(text='–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!')
    except AttributeError:
        await message.answer('–≠—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –ª–∏–±–æ –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
    else:
        await state.update_data(channel_id=channel.id, title=channel.title)
        await message.answer(
            text='–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –≤—Å—Ç—É–ø–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', reply_markup=get_cancel()
        )
        await state.set_state(SubscriptionChannelAdding.wait_for_url)


async def __handle_message_with_url(message: Message, state: FSMContext):
    channel_data = await state.get_data()
    parsed_url = urlparse(message.text)
    if bool(parsed_url.scheme and parsed_url.netloc):
        save_channel(channel_data.get('channel_id'), channel_data.get('title'), message.text)
        await message.answer('‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –û–ü!')
        await state.clear()
    else:
        await message.answer('–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –≤—Å—Ç—É–ø–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:')


async def __handle_delchannel_callback(callback: CallbackQuery) -> None:
    await callback.message.delete()
    await callback.message.answer(
        text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å: ',
        reply_markup=get_channels_markup()
    )


async def __handle_delete_channel_action_callback(callback: CallbackQuery, callback_data: ChannelToSubscribeCallback):
    delete_channel(callback_data.channel_id)
    await callback.message.delete()
    await callback.message.answer('‚úÖ –ö–∞–Ω–∞–ª –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –û–ü')
    await send_subchecking_menu(callback.message)


async def __handle_cancel_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await send_subchecking_menu(callback.message)


def register_necessary_subscriptions_handlers(router: Router):
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
    router.message.register(
        __handle_subchecking_message,
        F.text == 'üì≤ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏'
    )

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–±—ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
    router.callback_query.register(__handle_addchannel_callback, F.data == 'add_channel')

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    router.message.register(
        __handle_channel_post_message, SubscriptionChannelAdding.wait_for_post
    )

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–æ–π
    router.message.register(
        __handle_message_with_url,
        SubscriptionChannelAdding.wait_for_url
    )

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–±—ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    router.callback_query.register(__handle_cancel_callback, F.data == 'cancel')

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–∑ –û–ü
    router.callback_query.register(__handle_delchannel_callback, F.data == 'del_channel')
    router.callback_query.register(
        __handle_delete_channel_action_callback, ChannelToSubscribeCallback.filter(F.action == 'delete')
    )

# endregion
